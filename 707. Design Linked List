class Node:
    def __init__(self,val):
        self.val = val
        self.next = None

class MyLinkedList:

    def __init__(self):
        self.head = None
    

    def get(self, index: int) -> int:
        if not self.head: return -1

        i = 0
        curr = self.head
        while curr:
            if i == index:
                return curr.val
            curr = curr.next
            i += 1
        return -1


    def addAtHead(self, val: int) -> None:
        new_node = Node(val)
        if not self.head:
            self.head = new_node
        else:
            new_node.next, self.head = self.head, new_node


    def addAtTail(self, val: int) -> None:
        new_node=Node(val)
        if not self.head:
            self.head = new_node
            return
        curr = self.head
        while curr.next:
            curr=curr.next
        curr.next = new_node


    def addAtIndex(self, index: int, val: int) -> None:
        new_node = Node(val)
        
        # if index ==0
        if index==0:
            self.addAtHead(val)
            return
        if not self.head: return
        # if index is not 0
        curr = self.head
        i = 1
        while curr.next:
            if i==index: break
            curr = curr.next
            i+=1
        if curr.next or i==index:
            curr.next, new_node.next = new_node, curr.next

    def deleteAtIndex(self, index: int) -> None:
        if not self.head: return
        if index == 0 and self.head:
            self.head = self.head.next
            return

        prev = None
        curr = self.head
        i = 1
        while curr.next:
            prev,curr = curr, curr.next
            if i==index:
                prev.next = curr.next
                return
            i+=1
        


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
